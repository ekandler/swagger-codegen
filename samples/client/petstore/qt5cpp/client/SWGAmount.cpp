/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGAmount.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {



SWGAmount::SWGAmount(QString const &json) {
    init();
    this->fromJson(json);
}

SWGAmount::SWGAmount() {
    init();
}

SWGAmount::~SWGAmount() {
    this->cleanup();
}

void SWGAmount::init() {
    value = 0.0;
    value_isSet = false;}

void SWGAmount::cleanup() {
}

void SWGAmount::fromJson(QString const &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void SWGAmount::fromJsonObject(QJsonObject const &pJson) {
    mGenericData = pJson;
    
    value_isSet = pJson.contains("value");
    value = fromJsonValue<double>(pJson["value"]);


    currency = fromJsonValue<SWGCurrency>(pJson["currency"]);

}

QString SWGAmount::asJson () const
{
    QJsonObject const obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject SWGAmount::asJsonObject() const {
    QJsonObject obj;
    
    obj.insert("value", QJsonValue(value));

    obj.insert("currency", toJsonValue(currency));

    return obj;
}


double SWGAmount::getValue() const {
    return value;
}
void SWGAmount::setValue(double const &value) {
    this->value = value;
    this->value_isSet = true;
}


SWGCurrency SWGAmount::getCurrency() const {
    return currency;
}
void SWGAmount::setCurrency(SWGCurrency const &currency) {
    this->currency = currency;
}


bool SWGAmount::isSet() const{
    bool isObjectUpdated = false;
    do{
        
        if(value_isSet){ isObjectUpdated = true; break;}
        
        if(currency.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

