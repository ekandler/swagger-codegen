/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGUserApi_H_
#define _SWG_SWGUserApi_H_

#include "SWGHttpRequest.h"
#include "SWGHelpers.h"

#include <QList>
#include <QString>
#include "SWGUser.h"

#include <QObject>

namespace Swagger {

class SWGCreateUserReply;
class SWGCreateUsersWithArrayInputReply;
class SWGCreateUsersWithListInputReply;
class SWGDeleteUserReply;
class SWGGetUserByNameReply;
class SWGLoginUserReply;
class SWGLogoutUserReply;
class SWGUpdateUserReply;

class SWGUserApi: public QObject {
    Q_OBJECT

public:
    SWGUserApi(QObject * parent = nullptr);
    SWGUserApi(SWGClientConfig const &api, QObject * parent = nullptr);
    ~SWGUserApi();

    SWGClientConfig config;

    QSharedPointer<SWGCreateUserReply> createUser(SWGUser const &body);
    QSharedPointer<SWGCreateUsersWithArrayInputReply> createUsersWithArrayInput(QList<SWGUser> const &body);
    QSharedPointer<SWGCreateUsersWithListInputReply> createUsersWithListInput(QList<SWGUser> const &body);
    QSharedPointer<SWGDeleteUserReply> deleteUser(QString const &username);
    QSharedPointer<SWGGetUserByNameReply> getUserByName(QString const &username);
    QSharedPointer<SWGLoginUserReply> loginUser(QString const &username, QString const &password);
    QSharedPointer<SWGLogoutUserReply> logoutUser();
    QSharedPointer<SWGUpdateUserReply> updateUser(QString const &username, SWGUser const &body);
    
Q_SIGNALS:
    void createUserSignal();
    void createUsersWithArrayInputSignal();
    void createUsersWithListInputSignal();
    void deleteUserSignal();
    void getUserByNameSignal(SWGUser summary);
    void loginUserSignal(QString summary);
    void logoutUserSignal();
    void updateUserSignal();
    
    void createUserSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void createUsersWithArrayInputSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void createUsersWithListInputSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteUserSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserByNameSignalE(SWGUser summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void loginUserSignalE(QString summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void logoutUserSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void updateUserSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    
    void createUserSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void createUsersWithArrayInputSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void createUsersWithListInputSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteUserSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserByNameSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void loginUserSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void logoutUserSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateUserSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void userError(QString operation, QNetworkReply::NetworkError error_type, QString errMsg);
};

class SWGCreateUserReply : public SWGHttpRequestWorker {
    Q_OBJECT
public:
    SWGCreateUserReply(SWGUserApi * api, QObject * parent = nullptr);
    virtual void processResult() override;
    SWGUserApi * api;
};

class SWGCreateUsersWithArrayInputReply : public SWGHttpRequestWorker {
    Q_OBJECT
public:
    SWGCreateUsersWithArrayInputReply(SWGUserApi * api, QObject * parent = nullptr);
    virtual void processResult() override;
    SWGUserApi * api;
};

class SWGCreateUsersWithListInputReply : public SWGHttpRequestWorker {
    Q_OBJECT
public:
    SWGCreateUsersWithListInputReply(SWGUserApi * api, QObject * parent = nullptr);
    virtual void processResult() override;
    SWGUserApi * api;
};

class SWGDeleteUserReply : public SWGHttpRequestWorker {
    Q_OBJECT
public:
    SWGDeleteUserReply(SWGUserApi * api, QObject * parent = nullptr);
    virtual void processResult() override;
    SWGUserApi * api;
};

class SWGGetUserByNameReply : public SWGHttpRequestWorker {
    Q_OBJECT
public:
    SWGGetUserByNameReply(SWGUserApi * api, QObject * parent = nullptr);
    virtual void processResult() override;
    SWGUser result;
    SWGUserApi * api;
};

class SWGLoginUserReply : public SWGHttpRequestWorker {
    Q_OBJECT
public:
    SWGLoginUserReply(SWGUserApi * api, QObject * parent = nullptr);
    virtual void processResult() override;
    QString result;
    SWGUserApi * api;
};

class SWGLogoutUserReply : public SWGHttpRequestWorker {
    Q_OBJECT
public:
    SWGLogoutUserReply(SWGUserApi * api, QObject * parent = nullptr);
    virtual void processResult() override;
    SWGUserApi * api;
};

class SWGUpdateUserReply : public SWGHttpRequestWorker {
    Q_OBJECT
public:
    SWGUpdateUserReply(SWGUserApi * api, QObject * parent = nullptr);
    virtual void processResult() override;
    SWGUserApi * api;
};


}
#endif
