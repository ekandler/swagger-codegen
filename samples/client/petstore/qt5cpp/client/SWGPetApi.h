/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGPetApi_H_
#define _SWG_SWGPetApi_H_

#include "SWGHttpRequest.h"
#include "SWGHelpers.h"

#include <QString>
#include "SWGApiResponse.h"
#include "SWGHttpRequest.h"
#include "SWGPet.h"

#include <QObject>

namespace Swagger {

class SWGAddPetReply;
class SWGDeletePetReply;
class SWGFindPetsByStatusReply;
class SWGFindPetsByTagsReply;
class SWGGetPetByIdReply;
class SWGUpdatePetReply;
class SWGUpdatePetWithFormReply;
class SWGUploadFileReply;

class SWGPetApi: public QObject {
    Q_OBJECT

public:
    SWGPetApi(QObject * parent = nullptr);
    SWGPetApi(SWGClientConfig const &api, QObject * parent = nullptr);
    ~SWGPetApi();

    SWGClientConfig config;

    QSharedPointer<SWGAddPetReply> addPet(SWGPet const &body);
    QSharedPointer<SWGDeletePetReply> deletePet(qint64 const &pet_id, QString const &api_key);
    QSharedPointer<SWGFindPetsByStatusReply> findPetsByStatus(QList<QString> const &status);
    QSharedPointer<SWGFindPetsByTagsReply> findPetsByTags(QList<QString> const &tags);
    QSharedPointer<SWGGetPetByIdReply> getPetById(qint64 const &pet_id);
    QSharedPointer<SWGUpdatePetReply> updatePet(SWGPet const &body);
    QSharedPointer<SWGUpdatePetWithFormReply> updatePetWithForm(qint64 const &pet_id, QString const &name, QString const &status);
    QSharedPointer<SWGUploadFileReply> uploadFile(qint64 const &pet_id, QString const &additional_metadata, SWGHttpRequestInputFileElement const &file);
    
Q_SIGNALS:
    void addPetSignal();
    void deletePetSignal();
    void findPetsByStatusSignal(QList<SWGPet> summary);
    void findPetsByTagsSignal(QList<SWGPet> summary);
    void getPetByIdSignal(SWGPet summary);
    void updatePetSignal();
    void updatePetWithFormSignal();
    void uploadFileSignal(SWGApiResponse summary);
    
    void addPetSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void deletePetSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void findPetsByStatusSignalE(QList<SWGPet> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void findPetsByTagsSignalE(QList<SWGPet> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPetByIdSignalE(SWGPet summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void updatePetSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void updatePetWithFormSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void uploadFileSignalE(SWGApiResponse summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void addPetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deletePetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void findPetsByStatusSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void findPetsByTagsSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPetByIdSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updatePetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updatePetWithFormSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void uploadFileSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void petError(QString operation, QNetworkReply::NetworkError error_type, QString errMsg);
};

class SWGAddPetReply : public SWGHttpRequestWorker {
    Q_OBJECT
public:
    SWGAddPetReply(SWGPetApi * api, QObject * parent = nullptr);
    virtual void processResult() override;
    SWGPetApi * api;
};

class SWGDeletePetReply : public SWGHttpRequestWorker {
    Q_OBJECT
public:
    SWGDeletePetReply(SWGPetApi * api, QObject * parent = nullptr);
    virtual void processResult() override;
    SWGPetApi * api;
};

class SWGFindPetsByStatusReply : public SWGHttpRequestWorker {
    Q_OBJECT
public:
    SWGFindPetsByStatusReply(SWGPetApi * api, QObject * parent = nullptr);
    virtual void processResult() override;
    QList<SWGPet> result;
    SWGPetApi * api;
};

class SWGFindPetsByTagsReply : public SWGHttpRequestWorker {
    Q_OBJECT
public:
    SWGFindPetsByTagsReply(SWGPetApi * api, QObject * parent = nullptr);
    virtual void processResult() override;
    QList<SWGPet> result;
    SWGPetApi * api;
};

class SWGGetPetByIdReply : public SWGHttpRequestWorker {
    Q_OBJECT
public:
    SWGGetPetByIdReply(SWGPetApi * api, QObject * parent = nullptr);
    virtual void processResult() override;
    SWGPet result;
    SWGPetApi * api;
};

class SWGUpdatePetReply : public SWGHttpRequestWorker {
    Q_OBJECT
public:
    SWGUpdatePetReply(SWGPetApi * api, QObject * parent = nullptr);
    virtual void processResult() override;
    SWGPetApi * api;
};

class SWGUpdatePetWithFormReply : public SWGHttpRequestWorker {
    Q_OBJECT
public:
    SWGUpdatePetWithFormReply(SWGPetApi * api, QObject * parent = nullptr);
    virtual void processResult() override;
    SWGPetApi * api;
};

class SWGUploadFileReply : public SWGHttpRequestWorker {
    Q_OBJECT
public:
    SWGUploadFileReply(SWGPetApi * api, QObject * parent = nullptr);
    virtual void processResult() override;
    SWGApiResponse result;
    SWGPetApi * api;
};


}
#endif
