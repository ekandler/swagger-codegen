/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGPet.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

QStringList SWGPet::data_status { 
    "available",
    "pending",
    "sold"
};

SWGPet::SWGPet(QString const &json) {
    init();
    this->fromJson(json);
}

SWGPet::SWGPet() {
    init();
}

SWGPet::~SWGPet() {
    this->cleanup();
}

void SWGPet::init() {
    id = 0L;
    id_isSet = false;status = status_SWGUndefined;
}

void SWGPet::cleanup() {
}

void SWGPet::fromJson(QString const &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void SWGPet::fromJsonObject(QJsonObject const &pJson) {
    mGenericData = pJson;
    
    id_isSet = pJson.contains("id");
    id = fromJsonValue<qint64>(pJson["id"]);


    category = fromJsonValue<SWGCategory>(pJson["category"]);


    name = fromJsonValue<QString>(pJson["name"]);


    
    photo_urls = containerFromJsonValue<QList<QString> >(pJson["photoUrls"]);
    
    

    
    tags = containerFromJsonValue<QList<SWGTag> >(pJson["tags"]);
    
    

    status = status(data_status.indexOf(fromJsonValue<QString>(pJson["status"])));
}

QString SWGPet::asJson () const
{
    QJsonObject const obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject SWGPet::asJsonObject() const {
    QJsonObject obj;
    
    obj.insert("id", QJsonValue(id));

    obj.insert("category", toJsonValue(category));

    obj.insert("name", toJsonValue(name));

    obj.insert("photoUrls", toJsonArray(photo_urls));

    obj.insert("tags", toJsonArray(tags));

    obj.insert("status", data_status.at(status));

    return obj;
}


qint64 SWGPet::getId() const {
    return id;
}
void SWGPet::setId(qint64 const &id) {
    this->id = id;
    this->id_isSet = true;
}


SWGCategory SWGPet::getCategory() const {
    return category;
}
void SWGPet::setCategory(SWGCategory const &category) {
    this->category = category;
}


QString SWGPet::getName() const {
    return name;
}
void SWGPet::setName(QString const &name) {
    this->name = name;
}


QList<QString> SWGPet::getPhotoUrls() const {
    return photo_urls;
}
void SWGPet::setPhotoUrls(QList<QString> const &photo_urls) {
    this->photo_urls = photo_urls;
}


QList<SWGTag> SWGPet::getTags() const {
    return tags;
}
void SWGPet::setTags(QList<SWGTag> const &tags) {
    this->tags = tags;
}

SWGPet::status SWGPet::getStatus() const {
    return status;
}
void SWGPet::setStatus(status const &status) {
    this->status = status;
}


bool SWGPet::isSet() const{
    bool isObjectUpdated = false;
    do{
        
        if(id_isSet){ isObjectUpdated = true; break;}
        
        if(category.isSet()){ isObjectUpdated = true; break;}
        
        if(!name.isNull()){ isObjectUpdated = true; break;}
        
        if(photo_urls.size() > 0){ isObjectUpdated = true; break;}
        
        if(tags.size() > 0){ isObjectUpdated = true; break;}
        if(status>=0) { isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

