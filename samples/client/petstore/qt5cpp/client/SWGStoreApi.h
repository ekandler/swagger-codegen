/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGStoreApi_H_
#define _SWG_SWGStoreApi_H_

#include "SWGHttpRequest.h"
#include "SWGHelpers.h"

#include <QMap>
#include <QString>
#include "SWGOrder.h"

#include <QObject>

namespace Swagger {

class SWGDeleteOrderReply;
class SWGGetInventoryReply;
class SWGGetOrderByIdReply;
class SWGPlaceOrderReply;

class SWGStoreApi: public QObject {
    Q_OBJECT

public:
    SWGStoreApi(QObject * parent = nullptr);
    SWGStoreApi(SWGClientConfig const &api, QObject * parent = nullptr);
    ~SWGStoreApi();

    SWGClientConfig config;

    QSharedPointer<SWGDeleteOrderReply> deleteOrder(QString const &order_id);
    QSharedPointer<SWGGetInventoryReply> getInventory();
    QSharedPointer<SWGGetOrderByIdReply> getOrderById(qint64 const &order_id);
    QSharedPointer<SWGPlaceOrderReply> placeOrder(SWGOrder const &body);
    
Q_SIGNALS:
    void deleteOrderSignal();
    void getInventorySignal(QMap<QString, qint32> summary);
    void getOrderByIdSignal(SWGOrder summary);
    void placeOrderSignal(SWGOrder summary);
    
    void deleteOrderSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getInventorySignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getOrderByIdSignalE(SWGOrder summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void placeOrderSignalE(SWGOrder summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void deleteOrderSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getInventorySignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getOrderByIdSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void placeOrderSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void storeError(QString operation, QNetworkReply::NetworkError error_type, QString errMsg);
};

class SWGDeleteOrderReply : public SWGHttpRequestWorker {
    Q_OBJECT
public:
    SWGDeleteOrderReply(SWGStoreApi * api, QObject * parent = nullptr);
    virtual void processResult() override;
    SWGStoreApi * api;
};

class SWGGetInventoryReply : public SWGHttpRequestWorker {
    Q_OBJECT
public:
    SWGGetInventoryReply(SWGStoreApi * api, QObject * parent = nullptr);
    virtual void processResult() override;
    QMap<QString, qint32> result;
    SWGStoreApi * api;
};

class SWGGetOrderByIdReply : public SWGHttpRequestWorker {
    Q_OBJECT
public:
    SWGGetOrderByIdReply(SWGStoreApi * api, QObject * parent = nullptr);
    virtual void processResult() override;
    SWGOrder result;
    SWGStoreApi * api;
};

class SWGPlaceOrderReply : public SWGHttpRequestWorker {
    Q_OBJECT
public:
    SWGPlaceOrderReply(SWGStoreApi * api, QObject * parent = nullptr);
    virtual void processResult() override;
    SWGOrder result;
    SWGStoreApi * api;
};


}
#endif
