/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGOrder.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

QStringList SWGOrder::data_status { 
    "placed",
    "approved",
    "delivered"
};

SWGOrder::SWGOrder(QString const &json) {
    init();
    this->fromJson(json);
}

SWGOrder::SWGOrder() {
    init();
}

SWGOrder::~SWGOrder() {
    this->cleanup();
}

void SWGOrder::init() {
    id = 0L;
    id_isSet = false;pet_id = 0L;
    pet_id_isSet = false;quantity = 0;
    quantity_isSet = false;status = status_SWGUndefined;
complete = false;
    complete_isSet = false;}

void SWGOrder::cleanup() {
}

void SWGOrder::fromJson(QString const &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void SWGOrder::fromJsonObject(QJsonObject const &pJson) {
    mGenericData = pJson;
    
    id_isSet = pJson.contains("id");
    id = fromJsonValue<qint64>(pJson["id"]);


    pet_id_isSet = pJson.contains("petId");
    pet_id = fromJsonValue<qint64>(pJson["petId"]);


    quantity_isSet = pJson.contains("quantity");
    quantity = fromJsonValue<qint32>(pJson["quantity"]);


    ship_date = fromJsonValue<QDateTime>(pJson["shipDate"]);


    status = status(data_status.indexOf(fromJsonValue<QString>(pJson["status"])));

    complete_isSet = pJson.contains("complete");
    complete = fromJsonValue<bool>(pJson["complete"]);

}

QString SWGOrder::asJson () const
{
    QJsonObject const obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject SWGOrder::asJsonObject() const {
    QJsonObject obj;
    
    obj.insert("id", QJsonValue(id));

    obj.insert("petId", QJsonValue(pet_id));

    obj.insert("quantity", QJsonValue(quantity));

    obj.insert("shipDate", toJsonValue(ship_date));

    obj.insert("status", data_status.at(status));

    obj.insert("complete", QJsonValue(complete));

    return obj;
}


qint64 SWGOrder::getId() const {
    return id;
}
void SWGOrder::setId(qint64 const &id) {
    this->id = id;
    this->id_isSet = true;
}


qint64 SWGOrder::getPetId() const {
    return pet_id;
}
void SWGOrder::setPetId(qint64 const &pet_id) {
    this->pet_id = pet_id;
    this->pet_id_isSet = true;
}


qint32 SWGOrder::getQuantity() const {
    return quantity;
}
void SWGOrder::setQuantity(qint32 const &quantity) {
    this->quantity = quantity;
    this->quantity_isSet = true;
}


QDateTime SWGOrder::getShipDate() const {
    return ship_date;
}
void SWGOrder::setShipDate(QDateTime const &ship_date) {
    this->ship_date = ship_date;
}

SWGOrder::status SWGOrder::getStatus() const {
    return status;
}
void SWGOrder::setStatus(status const &status) {
    this->status = status;
}


bool SWGOrder::isComplete() const {
    return complete;
}
void SWGOrder::setComplete(bool const &complete) {
    this->complete = complete;
    this->complete_isSet = true;
}


bool SWGOrder::isSet() const{
    bool isObjectUpdated = false;
    do{
        
        if(id_isSet){ isObjectUpdated = true; break;}
        
        if(pet_id_isSet){ isObjectUpdated = true; break;}
        
        if(quantity_isSet){ isObjectUpdated = true; break;}
        
        
        if(status>=0) { isObjectUpdated = true; break;}
        
        if(complete_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

