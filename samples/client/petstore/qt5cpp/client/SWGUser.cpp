/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGUser.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {



SWGUser::SWGUser(QString const &json) {
    init();
    this->fromJson(json);
}

SWGUser::SWGUser() {
    init();
}

SWGUser::~SWGUser() {
    this->cleanup();
}

void SWGUser::init() {
    id = 0L;
    id_isSet = false;user_status = 0;
    user_status_isSet = false;}

void SWGUser::cleanup() {
}

void SWGUser::fromJson(QString const &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void SWGUser::fromJsonObject(QJsonObject const &pJson) {
    mGenericData = pJson;
    
    id_isSet = pJson.contains("id");
    id = fromJsonValue<qint64>(pJson["id"]);


    username = fromJsonValue<QString>(pJson["username"]);


    first_name = fromJsonValue<QString>(pJson["firstName"]);


    last_name = fromJsonValue<QString>(pJson["lastName"]);


    email = fromJsonValue<QString>(pJson["email"]);


    password = fromJsonValue<QString>(pJson["password"]);


    phone = fromJsonValue<QString>(pJson["phone"]);


    user_status_isSet = pJson.contains("userStatus");
    user_status = fromJsonValue<qint32>(pJson["userStatus"]);

}

QString SWGUser::asJson () const
{
    QJsonObject const obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject SWGUser::asJsonObject() const {
    QJsonObject obj;
    
    obj.insert("id", QJsonValue(id));

    obj.insert("username", toJsonValue(username));

    obj.insert("firstName", toJsonValue(first_name));

    obj.insert("lastName", toJsonValue(last_name));

    obj.insert("email", toJsonValue(email));

    obj.insert("password", toJsonValue(password));

    obj.insert("phone", toJsonValue(phone));

    obj.insert("userStatus", QJsonValue(user_status));

    return obj;
}


qint64 SWGUser::getId() const {
    return id;
}
void SWGUser::setId(qint64 const &id) {
    this->id = id;
    this->id_isSet = true;
}


QString SWGUser::getUsername() const {
    return username;
}
void SWGUser::setUsername(QString const &username) {
    this->username = username;
}


QString SWGUser::getFirstName() const {
    return first_name;
}
void SWGUser::setFirstName(QString const &first_name) {
    this->first_name = first_name;
}


QString SWGUser::getLastName() const {
    return last_name;
}
void SWGUser::setLastName(QString const &last_name) {
    this->last_name = last_name;
}


QString SWGUser::getEmail() const {
    return email;
}
void SWGUser::setEmail(QString const &email) {
    this->email = email;
}


QString SWGUser::getPassword() const {
    return password;
}
void SWGUser::setPassword(QString const &password) {
    this->password = password;
}


QString SWGUser::getPhone() const {
    return phone;
}
void SWGUser::setPhone(QString const &phone) {
    this->phone = phone;
}


qint32 SWGUser::getUserStatus() const {
    return user_status;
}
void SWGUser::setUserStatus(qint32 const &user_status) {
    this->user_status = user_status;
    this->user_status_isSet = true;
}


bool SWGUser::isSet() const{
    bool isObjectUpdated = false;
    do{
        
        if(id_isSet){ isObjectUpdated = true; break;}
        
        if(!username.isNull()){ isObjectUpdated = true; break;}
        
        if(!first_name.isNull()){ isObjectUpdated = true; break;}
        
        if(!last_name.isNull()){ isObjectUpdated = true; break;}
        
        if(!email.isNull()){ isObjectUpdated = true; break;}
        
        if(!password.isNull()){ isObjectUpdated = true; break;}
        
        if(!phone.isNull()){ isObjectUpdated = true; break;}
        
        if(user_status_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

