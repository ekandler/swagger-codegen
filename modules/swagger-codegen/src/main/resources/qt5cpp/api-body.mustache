{{>licenseInfo}}
#include "{{classname}}.h"
#include "{{prefix}}Helpers.h"

#include <QJsonArray>
#include <QJsonDocument>

{{#cppNamespaceDeclarations}}
namespace {{this}} {
{{/cppNamespaceDeclarations}}

{{classname}}::{{classname}}(QObject * parent) : QObject(parent) {}

{{classname}}::~{{classname}}() {}

{{classname}}::{{classname}}({{prefix}}ClientConfig const &config, QObject * parent) : QObject(parent), config(config) {}

{{#operations}}
{{#operation}}
QSharedPointer<{{prefix}}{{operationIdCamelCase}}Reply> {{classname}}::{{nickname}}({{#allParams}}{{{dataType}}} const &{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
    QString fullPath;
    fullPath.append(config.baseUrl).append("{{{path}}}");

    {{#pathParams}}
    QString {{paramName}}PathParam("{"); {{paramName}}PathParam.append("{{baseName}}").append("}");
    fullPath.replace({{paramName}}PathParam, stringValue({{paramName}}));
    {{/pathParams}}

    {{#queryParams}}
    {{^collectionFormat}}
    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("{{baseName}}"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue({{paramName}})));
    {{/collectionFormat}}

    {{#collectionFormat}}

    if ({{{paramName}}}.size() > 0) {
      if (QString("{{collectionFormat}}").indexOf("multi") == 0) {
        Q_FOREACH({{{baseType}}} t, {{paramName}}) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("{{{baseName}}}=").append(stringValue(t));
        }
      }
      else if (QString("{{collectionFormat}}").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("{{baseName}}=");
        qint32 count = 0;
        Q_FOREACH({{{baseType}}} t, {{paramName}}) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("{{collectionFormat}}").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("{{baseName}}=");
        qint32 count = 0;
        Q_FOREACH({{{baseType}}} t, {{paramName}}) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    {{/collectionFormat}}
    {{/queryParams}}

    QSharedPointer<{{prefix}}{{operationIdCamelCase}}Reply> worker(new {{prefix}}{{operationIdCamelCase}}Reply(this, this), &QObject::deleteLater);
    {{prefix}}HttpRequestInput input(fullPath, "{{httpMethod}}");

    {{#formParams}}
    if ({{paramName}} != nullptr) {
        {{^isFile}}input.add_var("{{baseName}}", *{{paramName}});{{/isFile}}{{#isFile}}input.add_file("{{baseName}}", (*{{paramName}}).local_filename, (*{{paramName}}).request_filename, (*{{paramName}}).mime_type);{{/isFile}}
    }
    {{/formParams}}

    {{#bodyParams}}
    {{#isContainer}}
    QJsonArray {{paramName}}Array = toJsonArray({{paramName}});
    QJsonDocument doc({{paramName}}Array);
    QByteArray bytes = doc.toJson();

    input.request_body.append(bytes);
    {{/isContainer}}
    {{^isContainer}}
    {{#isPrimitiveType}}
    QString output = stringValue({{paramName}});
    {{/isPrimitiveType}}
    {{^isPrimitiveType}}
    QString output = {{paramName}}.asJson();
    {{/isPrimitiveType}}
    input.request_body.append(output);
    {{/isContainer}}{{/bodyParams}}

    {{#headerParams}}
    if ({{paramName}} != nullptr) {
        input.headers.insert("{{baseName}}", "{{paramName}}");
    }
    {{/headerParams}}
    {{#authMethods}}
    // TODO: complete authMethods support
    {{#isKeyInHeader}}
    if (config.headerAuth.contains("{{keyParamName}}")) input.headers.insert("{{keyParamName}}", config.headerAuth["{{keyParamName}}"]);
    {{/isKeyInHeader}}
    {{/authMethods}}

    Q_FOREACH(QString key, config.defaultHeaders.keys()) {
        input.headers.insert(key, config.defaultHeaders.value(key));
    }

    worker->execute(input);
    connect(worker.data(), &{{prefix}}{{operationIdCamelCase}}Reply::finished, this, [worker]() mutable {
        worker.clear(); // keep worker object alive until class-wide response signal can be emitted
    });
    return worker;
}

{{prefix}}{{operationIdCamelCase}}Reply::{{prefix}}{{operationIdCamelCase}}Reply({{classname}} * api, QObject * parent ) : {{prefix}}HttpRequestWorker(parent), api(api) {}
void {{prefix}}{{operationIdCamelCase}}Reply::processResult() {
    if (error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(rawResponse.length());
    }
    else {
        msg = "Error: " + error_str;
        Q_EMIT api->{{classVarName}}Error("{{nickname}}", error_type, msg);
    }

    {{#returnType}}
    {{#isListContainer}}
    result = {{{defaultResponse}}};
    QJsonDocument const doc = QJsonDocument::fromJson(rawResponse);
    QJsonArray const jsonArray = doc.array();

    Q_FOREACH(QJsonValue const &obj, jsonArray) {
        {{{returnBaseType}}} o = fromJsonValue<{{{returnBaseType}}}>(obj);
        result.append(o);
    }
    {{/isListContainer}}
    {{^isListContainer}}
    {{^isMapContainer}}{{#returnTypeIsPrimitive}}
    {{#returnSimpleType}}result=QVariant(rawResponse).value<{{{returnType}}}>();{{/returnSimpleType}}
    {{/returnTypeIsPrimitive}}{{/isMapContainer}}
    {{#isMapContainer}}
    result = {{{defaultResponse}}};
    QJsonDocument const doc = QJsonDocument::fromJson(rawResponse);
    QJsonObject const obj = doc.object();

    Q_FOREACH(QString const &key, obj.keys()) {
        result.insert(key, fromJsonValue<{{{returnBaseType}}}>(obj[key]));
    }
    {{/isMapContainer}}
    {{^isMapContainer}}
    {{^returnTypeIsPrimitive}}QJsonDocument const doc = QJsonDocument::fromJson(rawResponse);
    if (doc.isObject()) {
        result = fromJsonValue<{{{returnBaseType}}}>(QJsonValue(doc.object()));
    } else {
        QString parsedResponse(rawResponse);
        if(parsedResponse.at(0) == '"') parsedResponse.remove(0,1);
        if(parsedResponse.at(parsedResponse.size()-1) == '"') parsedResponse.chop(1);
        result = fromJsonValue<{{{returnBaseType}}}>(QJsonValue(parsedResponse));
    }
    {{/returnTypeIsPrimitive}}
    {{/isMapContainer}}
    {{/isListContainer}}
    {{/returnType}}

    if (error_type == QNetworkReply::NoError) {
        Q_EMIT api->{{nickname}}Signal({{#returnType}}result{{/returnType}});
    } else {
        Q_EMIT api->{{nickname}}SignalE({{#returnType}}result, {{/returnType}}error_type, error_str);
        Q_EMIT api->{{nickname}}SignalEFull(this, error_type, error_str);
    }
}

{{/operation}}
{{/operations}}

{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}
