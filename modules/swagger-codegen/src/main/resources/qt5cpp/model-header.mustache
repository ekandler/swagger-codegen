{{>licenseInfo}}
{{#models}}{{#model}}/*
 * {{classname}}.h
 *
 * {{description}}
 */

#ifndef {{classname}}_H_
#define {{classname}}_H_

#include <QJsonObject>
#include <QStringList>

{{/model}}{{/models}}
{{#imports}}{{{import}}}
{{/imports}}

#include "{{prefix}}Object.h"

{{#models}}
{{#model}}
{{#cppNamespaceDeclarations}}
namespace {{this}} {
{{/cppNamespaceDeclarations}}

class {{classname}}: public {{prefix}}Object {
public:
    {{classname}}();
    {{classname}}(QString const &json);
    virtual ~{{classname}}();
    void init();
    void cleanup();

    QString asJson () const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject const &json) override;
    void fromJson(QString const &jsonString) override;

    {{#vars}}
    {{#isEnum}}enum {{baseName}} { 
        {{baseName}}_{{prefix}}Undefined=-1{{#allowableValues}}{{#values}},
        {{baseName}}_{{.}}{{/values}}{{/allowableValues}}
    };
    {{{baseName}}} {{getter}}() const;
    void {{setter}}({{{baseName}}} const &{{name}});{{/isEnum}}{{^isEnum}}
    {{{datatype}}} {{getter}}() const;
    void {{setter}}({{{datatype}}} const &{{name}});
    {{/isEnum}}

    {{/vars}}

    virtual bool isSet() const override;

private:
    {{#vars}}
    {{#isEnum}}static QStringList data_{{baseName}};
    {{baseName}} {{name}};{{/isEnum}}{{^isEnum}}
    {{{datatype}}} {{name}};{{/isEnum}}{{#isPrimitiveType}}
    bool {{name}}_isSet;{{/isPrimitiveType}}

    {{/vars}}
};

{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}

#endif /* {{classname}}_H_ */
{{/model}}
{{/models}}
