{{>licenseInfo}}
{{#models}}{{#model}}
#include "{{classname}}.h"

#include "{{prefix}}Helpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

{{#cppNamespaceDeclarations}}
namespace {{this}} {
{{/cppNamespaceDeclarations}}

{{#vars}}{{#isEnum}}QStringList {{classname}}::data_{{baseName}} { {{#allowableValues}}{{#values}}
    "{{.}}"{{^-last}},{{/-last}}{{/values}}{{/allowableValues}}
};{{/isEnum}}{{/vars}}

{{classname}}::{{classname}}(QString const &json) {
    init();
    this->fromJson(json);
}

{{classname}}::{{classname}}() {
    init();
}

{{classname}}::~{{classname}}() {
    this->cleanup();
}

void {{classname}}::init() {
    {{#vars}}{{#isPrimitiveType}}{{name}} = {{{defaultValue}}};
    {{name}}_isSet = false;{{/isPrimitiveType}}{{#isEnum}}{{name}} = {{baseName}}_{{prefix}}Undefined;
    {{/isEnum}}
    {{/vars}}
}

void {{classname}}::cleanup() {
}

void {{classname}}::fromJson(QString const &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void {{classname}}::fromJsonObject(QJsonObject const &pJson) {
    mGenericData = pJson;
    {{#vars}}{{#isEnum}}
    {{name}} = {{baseName}}(data_{{baseName}}.indexOf(fromJsonValue<{{baseType}}>(pJson["{{baseName}}"])));{{/isEnum}}{{^isEnum}}
    {{#isPrimitiveType}}{{name}}_isSet = pJson.contains("{{baseName}}");
    {{/isPrimitiveType}}{{^isContainer}}{{name}} = fromJsonValue<{{baseType}}>(pJson["{{baseName}}"]);{{/isContainer}}
    {{#isContainer}}
    {{#complexType}}{{name}} = containerFromJsonValue<{{baseType}}<{{complexType}}> >(pJson["{{baseName}}"]);{{/complexType}}
    {{^complexType}}{{name}} = containerFromJsonValue<{{baseType}}<{{items.baseType}}> >(pJson["{{baseName}}"]);{{/complexType}}
    {{/isContainer}}{{/isEnum}}
    {{/vars}}
}

QString {{classname}}::asJson () const
{
    QJsonObject const obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject {{classname}}::asJsonObject() const {
    QJsonObject obj;
    {{#vars}}{{#isEnum}}
    obj.insert("{{baseName}}", data_{{baseName}}.at({{name}}));{{/isEnum}}{{^isEnum}}{{#complexType}}{{^isContainer}}{{#complexType}}
    obj.insert("{{baseName}}", toJsonValue({{name}}));{{/complexType}}{{^complexType}}
    if({{name}} != nullptr && *{{name}} != nullptr) { 
        obj.insert("{{name}}", QJsonValue(*{{name}}));
    }{{/complexType}}{{/isContainer}}{{#isContainer}}
    obj.insert("{{baseName}}", toJsonArray({{name}}));{{/isContainer}}{{/complexType}}{{^complexType}}{{^isContainer}}
    obj.insert("{{baseName}}", QJsonValue({{name}}));{{/isContainer}}{{#isContainer}}
    obj.insert("{{baseName}}", toJsonArray({{name}}));{{/isContainer}}{{/complexType}}{{/isEnum}}
    {{/vars}}

    return obj;
}

{{#vars}}
{{#isEnum}}
{{classname}}::{{{baseName}}} {{classname}}::{{getter}}() const {
    return {{name}};
}
void {{classname}}::{{setter}}({{{baseName}}} const &{{name}}) {
    this->{{name}} = {{name}};
}
{{/isEnum}}{{^isEnum}}
{{{datatype}}} {{classname}}::{{getter}}() const {
    return {{name}};
}
void {{classname}}::{{setter}}({{{datatype}}} const &{{name}}) {
    this->{{name}} = {{name}};{{#isPrimitiveType}}
    this->{{name}}_isSet = true;{{/isPrimitiveType}}
}
{{/isEnum}}

{{/vars}}

bool {{classname}}::isSet() const{
    bool isObjectUpdated = false;
    do{
    {{#vars}}
        {{#isEnum}}if({{name}}>=0) { isObjectUpdated = true; break;}{{/isEnum}}{{^isEnum}}
        {{#isPrimitiveType}}if({{name}}_isSet){ isObjectUpdated = true; break;}{{/isPrimitiveType}}{{#isContainer}}if({{name}}.size() > 0){ isObjectUpdated = true; break;}{{/isContainer}}{{^isContainer}}{{#complexType}}{{^isString}}{{^isDateTime}}if({{name}}.isSet()){ isObjectUpdated = true; break;}{{/isDateTime}}{{/isString}}{{#isString}}if(!{{name}}.isNull()){ isObjectUpdated = true; break;}{{/isString}}{{/complexType}}{{/isContainer}}{{/isEnum}}
    {{/vars}}
    }while(false);
    return isObjectUpdated;
}
{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}

{{/model}}
{{/models}}
