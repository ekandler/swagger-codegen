{{>licenseInfo}}
#include "{{prefix}}Helpers.h"
#include "{{prefix}}Object.h"
#include <QDebug>
#include <QJsonArray>
#include <QJsonValue>
#include <QDateTime>


{{#cppNamespaceDeclarations}}
namespace {{this}} {
{{/cppNamespaceDeclarations}}


QString
stringValue(QByteArray value) {
    return value;
}

QString
stringValue(QString value) {
    return value;
}

QString
stringValue(qint32 value) {
    return QString::number(value);
}

QString
stringValue(qint64 value) {
    return QString::number(value);
}

QString
stringValue(bool value) {
    return QString(value ? "true" : "false");
}

QString
stringValue(QDateTime value) {
    return value.toString(Qt::ISODateWithMs);
}

void toPrimitiveValue(bool &output, const QString &value)
{
    if (value.compare("true", Qt::CaseInsensitive) == 0) {
        output = true;
        return;
    }
    output = false;
}

void toPrimitiveValue(QString &output, const QString &value)
{
    output = QString(value);
}

void toPrimitiveValue(qint32 &output, const QString &value)
{
    output = value.toInt();
}

void toPrimitiveValue(qint64 &output, const QString &value)
{
    output = value.toLong();
}

void toPrimitiveValue(QDateTime &output, const QString &value)
{
    output = QDateTime::fromString(value, Qt::ISODateWithMs);
}

{{prefix}}ClientConfig::{{prefix}}ClientConfig(QString baseUrl)
{
    this->baseUrl = baseUrl;
}

{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}
